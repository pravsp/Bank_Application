#include<iostream>
#include<map>
#include "uid_type.h"
#include "uid_numeric.h"


using namespace std;

namespace banking_lib_utilities {
    map<string, UIDGenerator<int64_t>*> UIDNumeric::pools;

    bool UIDNumeric::create_UIDPool(string pool_name){
        /*
         * create_UIDPool will create a uid pool based on pool name
         * :param pool_name: Name of the pool
         * :type pool_name: string
         * :return bool true or false on successful creation of pool
         */
        UIDGenerator<int64_t>* pool = UIDNumeric::get_uid_pool(pool_name); 
        if ( pool == NULL) {
            pool = new UIDGenerator<int64_t>(INTEGER);
            if (pool == NULL) {
                cout<<"Error Creating Numeric UIDPool"<<endl;
                return false;
            }
            UIDNumeric::pools.insert(make_pair(pool_name, pool));    
        }
        return true;
    }
    UIDGenerator<int64_t>* UIDNumeric::get_uid_pool(string pool_name){
        /*
         * get_uid_pool api will get the corresponding id_pool, given a pool_name.
         * :param pool_name: name of the pool
         * :type pool_name: string
         * :return UIDGenerator instance for template type int64_t 
         * rtype: UIDGenerator<int64_t>*
         */
        auto itr = UIDNumeric::pools.find(pool_name);
        if (itr == UIDNumeric::pools.end()){
            return NULL;
        }
        return itr->second;
    }

    list<string> UIDNumeric::get_available_uid_pool(){
        /*
         * get_available_uid_pools will get all the available pool_names
         * :return list of pool_names
         * :rtype: list<string>
         */
        list<string> available_pools;
        for (auto itr = UIDNumeric::pools.begin();
                itr != UIDNumeric::pools.end(); itr++){
            available_pools.push_back(itr->first);
        }
        return available_pools;
    }

    int64_t UIDNumeric::get_new_uid(string pool_name){
        /*
         * get_new_uid will get a new uid from the pool
         * :param pool_name: name of the pool to be used
         * :type pool_name: string
         * :return new numeric id
         * :rtypr: int64_t
         */
        auto pool = UIDNumeric::get_uid_pool(pool_name);
        if (pool == NULL) {
            cout<<"Couldn't find the pool for "<<pool_name<<endl;
            return -1;
        }
        return pool->create_new_uid();

    }
    bool UIDNumeric::release_uid(string pool_name, int64_t uid){
        /*
         * release_uid will release the given id from the pool_name
         * :param pool_name: name of the pool to be used
         * :type pool_name: string
         * :param uid: uid which was generated by generator
         * :type uid: int64_t
         * :return true if id released else false
         * :rtype: bool
         */
        auto pool = UIDNumeric::get_uid_pool(pool_name);
        if (pool == NULL) {
            cout<<"Couldn't find the pool for "<<pool_name<<endl;
            return false;
        }
        return pool->release_uid(uid);
    }

    bool UIDNumeric::uid_exists(string pool_name, int64_t uid){
        /*
         * uid_exists will check if the given uid exists in the pool_name
         * :param pool_name: name of the pool to be used
         * :type pool_name: string
         * :param uid: unique identifier
         * :type uid: int64_t
         * :return true if the id exists else false
         */
        auto pool = UIDNumeric::get_uid_pool(pool_name);
        if (pool == NULL) {
            cout<<"Couldn't find the pool for "<<pool_name<<endl;
            return false;
        }
        return pool->uid_exists(uid);
    }
    list<int64_t> UIDNumeric::get_all_allocated_uid(string pool_name){
        /*
         * get_all_allocated_uid will get all the allocated ids from pool
         * :param pool_name: name of the pool to be used
         * :type pool_name: string
         * :return list of the unique ids
         * :rtype list<int64_t>
         */
        auto pool = UIDNumeric::get_uid_pool(pool_name);
        if (pool == NULL) {
            cout<<"Couldn't find the pool for "<<pool_name<<endl;
            //return empty list
            return list<int64_t>();
        }
        return pool->get_all_allocated_uid();        

    }

}